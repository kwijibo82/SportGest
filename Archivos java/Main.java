/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package udimasportgest;

import com.google.gson.Gson;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author Javi
 */
public class Main extends javax.swing.JFrame {

     //ArraysLists para el almacenaje de la las parejas de pádel y 
    //los equipos de fútbol
    private static ArrayList<EquipoFutbol> equiposFutbolArrayList = 
            new ArrayList();
    private static ArrayList<ParejaPadel> parejaPadelArrayList = 
            new ArrayList();
    
    //ArrayLists que guarda los datos para ser grabados posteriormente
    private static ArrayList<PartidoPadel> arrayPadelToArchivo = 
            new ArrayList();
    private static ArrayList<PartidoFutbol> arrayFutbolToArchivo = 
            new ArrayList();
    
    private static ArrayList<Object> arrayJornadas = new ArrayList();
    
    //constante que representa el número de jornadas
    public static final int NUMERO_JORNADAS = 6;  
    
    //ArrayList para guardar los usuarios creados
    public static List<Usuario> arrayUsuario = new ArrayList<>();
    
    //ArrayList para guardar los equipos creados
    public static List<Equipo> arrayEquipos = new ArrayList<>();
    
    //ArrayList para guardar las competiciones creadas en el sistema
    public static List<Competicion> arrayCompeticion = new ArrayList<>();
    
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Equipo", "P. Ganados", "P. Empatados", "P. Perdidos", "Puntos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setText("CLASIFICACIÓN LIGA FUTBOL");

        jLabel2.setText("CLASIFICACIÓN LIGA PADEL");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Equipo", "P. Ganados", "P. Empatados", "P. Perdidos", "Puntos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
        }

        jMenu1.setText("Archivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Cargar datos desde archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Guardar datos en archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Borrar datos en memoria");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Salir");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");

        jMenu6.setText("Crear");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem5.setText("Crear usuario");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem6.setText("Crear equipo");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem7.setText("Crear competición");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem7);

        jMenu2.add(jMenu6);

        jMenu5.setText("Eliminar");

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Eliminar usuario");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Eliminar equipo");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Eliminar competición");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenu2.add(jMenu5);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Herramientas");

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem11.setText("Mostrar datos en memoria");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem12.setText("Generar archivo de simulación ");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem13.setText("Enviar datos al servidor");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);
        jMenu3.add(jSeparator2);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem16.setText("Iniciar simulación de competiciones");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem16);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Ayuda");

        jMenuItem14.setText("Notas de corrección");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem14);

        jMenuItem15.setText("Sobre la práctica");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem15);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que recoge el evento de la barra de menú 
     * Archivo -> Cargar datos de archivo
     * @param evt 
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        try {
            if (Datos.cargarDatos()) 
            {
                JOptionPane.showMessageDialog(null, 
                    "Datos cargados correctamente.\n ");
            }
            else
            {
                JOptionPane.showMessageDialog(null, 
                    "Los datos no han sido cargados\n \n" +
                            "Si cree que ha podido deberse ha un error del"
                            + " programa por favor, "
                            + "asegurese \nde que el archivo cargado "
                            + "tiene un extensión CSV y la estructura"
                            + " correcta.");
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Archivo -> Salir
     * @param evt 
     */
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        
       int result = JOptionPane.showConfirmDialog(null, 
               "¿Desea cerrar el prorama?\n Todos los datos no guardados "
                       + "se perderán", "¡Atención!", 
                       JOptionPane.INFORMATION_MESSAGE);
       
        if (result == 0) { //Termina programa  
            
            System.exit(0);           
        }      
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Editar -> Eliminar
     * Eliminar Usuario
     * @param evt 
     */
    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        
        eliminarUsuario();
        
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Editar -> Eliminar
     * Eliminar Equipo
     * @param evt 
     */
    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        
        eliminarEquipo();
        
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Editar -> Eliminar
     * Eliminar Competición
     * @param evt 
     */
    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        
        eliminarCompeticion();
        
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Editar -> Crear
     * Crear usuario
     * @param evt 
     */
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        crearUsuario();
             
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Editar -> Crear
     * Crear usuario
     * @param evt 
     */
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        
        crearEquipo();
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Editar -> Crear
     * Crear Competición
     * @param evt 
     */
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        
        crearCompeticion();
        
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Herramientas -> 
     * Mostrar datos por pantalla
     * @param evt 
     */
    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        
        mostrarDatos();
        
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Herramientas -> 
     * Generar archivo de simluación
     * @param evt 
     */
    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        
        generarJugadoresYEquipos();
        try {
            simulaCompeticiones();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            Datos.grabarEnArchivo(arrayPadelToArchivo, arrayFutbolToArchivo);
             JOptionPane.showMessageDialog(null, 
                    "Datos grabados correctamente en el archivo."); 
       
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Herramientas -> 
     * Enviar datos al servidor
     * @param evt 
     */
    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        
        try {
            
            if (arrayUsuario.isEmpty() || 
                arrayEquipos.isEmpty() || 
                arrayCompeticion.isEmpty()) 
            {
                JOptionPane.showMessageDialog(null, 
                    "No hay datos cargados que enviar.\n "
                    + "Por favor, cargue datos desde un archivo antes de enviar"
                            + " la información al servidor"); 
            }
            else
            {
                
                EnviarDato.enviarJson(parsearAJson(arrayUsuario));
                EnviarDato.enviarJson(parsearAJson(arrayEquipos));
                EnviarDato.enviarJson(parsearAJson(arrayCompeticion));
            
                JOptionPane.showMessageDialog(null, 
                    "Los datos han sido enviados correctamente al servidor."); 
                
            }
            
        } 
        catch (ConnectException ex)
        {
             JOptionPane.showMessageDialog(null, 
                    "No ha podido establcerse una conexión con el servidor.\n"
                            + "Por favor, aseguresé de que el servidor se \n"
                    + "encuentra encendido y correctamente configurado."); 
             ex.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Archivo -> 
     * Guardar datos en archivo
     * @param evt 
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
       
        try {
            
            if (arrayCompeticion.isEmpty() ||
                arrayEquipos.isEmpty() ||
                arrayUsuario.isEmpty())
            {
               JOptionPane.showMessageDialog(null, 
                    "No hay datos cargados que guardar.\n "
                    + "Por favor, cargue datos desde un archivo "
                            + " para poder guardarlos");
            }
            else
            {
                Datos.guardarDatosEnFichero();
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Herramientas -> 
     * Borrar datos en memoria
     * @param evt 
     */
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        borrarTodosLosDatos();

        JOptionPane.showMessageDialog(null, "Datos de memoria borrados "
                + "correctamente.");
                    
         
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * Método que recoge el evento de la barra de menú Herramientas -> 
     * Iniciar simulación de competiciones
     * @param evt 
     */
    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        
        //restauramos valores de los arrays
        parejaPadelArrayList.clear();
        equiposFutbolArrayList.clear();
        
        generarJugadoresYEquipos();
        try {
            simulaCompeticiones();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }        
       
        
         //ordena el array con una sobreescritura del método compare
        Collections.sort(equiposFutbolArrayList, new Comparator<EquipoFutbol>() {

            @Override
            public int compare(EquipoFutbol o1, EquipoFutbol o2) {
                
                return o2.getPuntos() - o1.getPuntos();
                
            }
        });
        
        //llena la jTable de la liga de Futbol
        for (int row = 0; row < jTable1.getRowCount(); row++) {
                   
            jTable1.setValueAt(equiposFutbolArrayList.get(row)
                .getNombre(), row, 0);
            jTable1.setValueAt(equiposFutbolArrayList.get(row)
                .getPartidosGanados(),row, 1);
            jTable1.setValueAt(equiposFutbolArrayList.get(row)
                .getPartidosEmpatados(), row, 2);
            jTable1.setValueAt(equiposFutbolArrayList.get(row)
                .getPartidosPerdidos(), row, 3);
            jTable1.setValueAt(equiposFutbolArrayList.get(row)
                .getPuntos(), row, 4);
         
        }
        
       
        //ordena el array con una sobreescritura del método compare
        Collections.sort(parejaPadelArrayList,
                new Comparator<ParejaPadel>() {

            @Override
            public int compare(ParejaPadel o1, ParejaPadel o2) {
                
                return o2.getPuntos() - o1.getPuntos();
                
            }
        });
        
        //llena la jTable de la liga de Padel
        for (int row = 0; row < jTable2.getRowCount(); row++) {
              
            jTable2.setValueAt(parejaPadelArrayList.get(row)
                    .getNombre(), row, 0);
            jTable2.setValueAt(parejaPadelArrayList.get(row)
                    .getPartidosGanados(),row, 1);
            jTable2.setValueAt("-", row, 2);
            jTable2.setValueAt(parejaPadelArrayList.get(row)
                    .getPartidosPerdidos(), row, 3);
            jTable2.setValueAt(parejaPadelArrayList.get(row)
                    .getPuntos(),row, 4);
        }
        
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    
    /**
     * Método que muestra algunas notas a tener en cuenta para la 
     * correción de la práctica
     * @param evt 
     */
    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
       
        JOptionPane.showMessageDialog(null, " Debido a la escalabilidad de "
                + "la programación y diseño original\n de la actividad propuesta,"
                + " el sistema no genera competiciones\n en modo torneo si no que"
                + " lo hace en modo ligas.");
        
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    /**
     * Método que muestra por pantalla los datos del alumno, la asignatura 
     * y el profesor.
     * @param evt 
     */
    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        
        JOptionPane.showMessageDialog(null, "Actividad de Aprendizaje 2: "
                + "Interfaces gráficas en Java.\n"
        +"Asignatura: Metodología de la Programación\n" 
        + "Alumno: Javier Mora Chacón");
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    /** Método que simula las competiciones del sistema según
     * el diseño propuesto en el ejercicio.
     */
    public static void simulaCompeticiones() throws IOException
    {
            simulaLigaPadel();
            simulaLigaFutbol();                   
    }
    
    /**
     * Método que simula la liga de los equipos de futbol tal y
     * como se indica en el enunciado.
     */
    public static void simulaLigaFutbol() throws IOException
    {
        int partidoCount = 0;
        int jornadaCount = 0; 
        
        for (EquipoFutbol ef1 : equiposFutbolArrayList) {
            
            jornadaCount++;
            Jornada j = new Jornada();
            j.setNumeroJornada(jornadaCount);
            for (EquipoFutbol ef2 : equiposFutbolArrayList) {  

                if (ef1.getIdEquipoFutbol() == null ? ef2.getIdEquipoFutbol() 
                        != null : !ef1.getIdEquipoFutbol()
                                .equals(ef2.getIdEquipoFutbol()))
                {
                    partidoCount += 1;
                    PartidoFutbol pf = new PartidoFutbol(ef1, ef2);
                    pf.resultadoPartido(partidoCount);
                    
                    //seteamos combinación de equipos 
                    pf.setCombinacion(ef1.getNombre() + " - " + 
                            ef2.getNombre());
                    
                    pf.setNumPartido(partidoCount);
                    pf.setNumeroJornada(j.getNumeroJornada());
                    
                    arrayFutbolToArchivo.add(pf);
                          
                    
                }   
            }

        }
        
    }
    
    /**
     * Método que simula la liga de pádel, iterando los elementos del
     * array que contiene las parejas entre sí.
     */
    public static void simulaLigaPadel() throws IOException
    {
        int partidoCount = 0;
        int jornadaCount = 0;
        
        for (ParejaPadel p1 : parejaPadelArrayList) {
            
            jornadaCount++;
            Jornada j = new Jornada();
            j.setNumeroJornada(jornadaCount);            
            for (ParejaPadel p2 : parejaPadelArrayList) {
                        
                if (p1.getIdParejaPadel() !=  p2.getIdParejaPadel()) 
                {
                    partidoCount += 1;                
                    PartidoPadel pp = new PartidoPadel(p1, p2);
          
                    pp.setNumPartido(partidoCount);
                    pp.resultadoPartido(partidoCount);
                    
                    //seteamos combinación de equipos 
                    pp.setCombinacion(p1.getNombre() + " - " + 
                            p2.getNombre());
                    
                    pp.setNumPartido(partidoCount);
                    pp.setNumeroJornada(j.getNumeroJornada());
                    
                    //array que almacena los resultados 
                    //de cada partido celebrado
                    arrayPadelToArchivo.add(pp);
                    
                }
                
            }
            
        }
    }


    /**
     * Método que instancia 12 jugadores, 6 parejas de pádel y 4
     * equipos de fútbol, tal y como se indica en el enunciado.
     */
    public static void generarJugadoresYEquipos()
    {
        Jugador j1 = 
          new Jugador("David", "Fernández", "Díaz", "Zurdo",
                  22, 28, "00000001A");
        Jugador j2 = 
          new Jugador("Alberto", "Ruíz", "Delgado", "Diestro",
                  18, 41, "00000002A");
        Jugador j3 = 
          new Jugador("Daniel", "López", "Pérez", "Diestro",
                  33, 25, "00000003A");
        Jugador j4 = 
          new Jugador("Damián", "De las Heras", "Sampietro", "Diestro",
                  33, 25, "00000004A");
        Jugador j5 = 
          new Jugador("Ernesto", "Jimienez", "Puertas", "Zurdo", 
                  23, 24, "00000005A");
        Jugador j6 = 
          new Jugador("Javier", "Santillana", "Hermida", "Diestro",
                  21, 34, "00000006A");
        Jugador j7 = 
          new Jugador("Luís Ángel", "Herce", "Ruíz", "Diestro",
                  27, 35, "00000007A");
        Jugador j8 = 
          new Jugador("Moises", "Motos", "De la Vega", "Zurdso", 
                  33, 50, "00000008A");
        Jugador j9 = 
          new Jugador("Federico", "Martínez", "Bellido", "Diestro",
                  31, 19, "00000009A");
        Jugador j10 = 
          new Jugador("Alejandro", "García", "Manrique", "Diestro",
                  38, 25, "00000010A");
        Jugador j11 = 
          new Jugador("Raúl", "Martínez", "Soria", "Zurdo",
                  31, 21, "00000011A");
        Jugador j12 = 
          new Jugador("Esteban", "Rubio", "García", "Diestro", 
                  31, 29, "00000012A");
        
        
        //Parejas de pádel
        ArrayList<Jugador> pareja1ArrayList = new ArrayList<>();
        pareja1ArrayList.add(j1);
        pareja1ArrayList.add(j2);
        Entrenador ep1 = new Entrenador("Paco Flores", 60, "00000013A");
        Delegado d1 = new Delegado("Pepe Sánchez", 54, "00000014A");
        ParejaPadel p1 = new ParejaPadel(pareja1ArrayList, ep1, d1, "01", 
                "Paco y Pepe");
        
        ArrayList<Jugador> pareja2ArrayList = new ArrayList<>();
        pareja2ArrayList.add(j3);
        pareja2ArrayList.add(j4);
        Entrenador ep2 = new Entrenador("Gabriel Fernandez", 45, "00000015A");
        Delegado d2 = new Delegado("Esteban Urquijo", 54, "00000016A");
        ParejaPadel p2 = new ParejaPadel(pareja2ArrayList, ep2, d2, "02", 
                "Gabriel y Esteban");
        
        ArrayList<Jugador> pareja3ArrayList = new ArrayList<>();
        pareja3ArrayList.add(j5);
        pareja3ArrayList.add(j6);
        Entrenador ep3 = new Entrenador("Jorge Gabriel", 60, "00000017A");
        Delegado d3 = new Delegado("Fernando Ramirez", 54, "00000018A");
        ParejaPadel p3 = new ParejaPadel(pareja3ArrayList, ep3, d3, "03", 
                "Jorge y Fernando");
        
        ArrayList<Jugador> pareja4ArrayList = new ArrayList<>();
        pareja4ArrayList.add(j7);
        pareja4ArrayList.add(j8);
        Entrenador ep4 = new Entrenador("David Sánchez", 60, "00000019A");
        Delegado d4 = new Delegado("Marcos Benavente", 54, "00000020A");
        ParejaPadel p4 = new ParejaPadel(pareja4ArrayList, ep4, d4, "04", 
                "David y Marcos");
        
        ArrayList<Jugador> pareja5ArrayList = new ArrayList<>();
        pareja5ArrayList.add(j9);
        pareja5ArrayList.add(j10);
        Entrenador ep5 = new Entrenador("Ramiro Díaz", 60, "00000021A");
        Delegado d5 = new Delegado("Sergio Hernández", 54, "00000022A");
        ParejaPadel p5 = new ParejaPadel(pareja5ArrayList, ep5, d5, "05", 
                "Ramiro y Sergio");
        
        ArrayList<Jugador> pareja6ArrayList = new ArrayList<>();
        pareja6ArrayList.add(j11);
        pareja6ArrayList.add(j12);
        Entrenador ep6 = new Entrenador("Juan Benavides", 60, "00000023A");
        Delegado d6 = new Delegado("Carlos García", 54, "00000024A");
        ParejaPadel p6 = new ParejaPadel(pareja6ArrayList, ep6, d6, "06", 
                "Juan y Carlos");
        
        //añadimos las parejas a un arrayList de la clase ParejaPadel
        parejaPadelArrayList.add(p1);
        parejaPadelArrayList.add(p2);
        parejaPadelArrayList.add(p3);
        parejaPadelArrayList.add(p4);
        parejaPadelArrayList.add(p5);
        parejaPadelArrayList.add(p6);
            
        //Equipos de fútbol
        ArrayList<Jugador> equipo1ArrayList = new ArrayList<>();
        equipo1ArrayList.add(j1);
        equipo1ArrayList.add(j2);
        equipo1ArrayList.add(j3);
        Entrenador ef1 = new Entrenador("Juan Benavides", 60, "00000025A");
        Delegado df1 = new Delegado("Pepe Sánchez", 54, "00000026A"); 
        EquipoFutbol efu1 = new EquipoFutbol(3,equipo1ArrayList,ef1,df1, "01", 
                "FC Zamora");
        
        ArrayList<Jugador> equipo2ArrayList = new ArrayList<>();
        equipo2ArrayList.add(j4);
        equipo2ArrayList.add(j5);
        equipo2ArrayList.add(j6);
        Entrenador ef2 = new Entrenador("Ramiro Díaz", 37, "00000027A");
        Delegado df2 = new Delegado("Sergio Hernández", 44, "00000028A"); 
        EquipoFutbol efu2 = new EquipoFutbol(3, equipo2ArrayList, ef2, df2, 
                "02", "Ondarrabia CF");
    
        ArrayList<Jugador> equipo3ArrayList = new ArrayList<>();
        equipo3ArrayList.add(j7);
        equipo3ArrayList.add(j8);
        equipo3ArrayList.add(j9);
        Entrenador ef3 = new Entrenador("Jorge Gabriel", 29, "00000029A");
        Delegado df3 = new Delegado("Esteban Urquijo", 32, "00000030A"); 
        EquipoFutbol efu3 = new EquipoFutbol(3, equipo3ArrayList, ef3, df3, 
                "03", "Fuenjirola SAD");
        
        ArrayList<Jugador> equipo4ArrayList = new ArrayList<>();
        equipo4ArrayList.add(j10);
        equipo4ArrayList.add(j11);
        equipo4ArrayList.add(j12);
        Entrenador ef4 = new Entrenador("Jorge Gabriel", 34, "00000031A");
        Delegado df4 = new Delegado("Esteban Urquijo", 54, "00000032A"); 
        EquipoFutbol efu4 = new EquipoFutbol(3, equipo4ArrayList, ef4, df4, 
                "04", "UD Barbastro");
        
        //añadimos los jugadores al un arrayList de la clase EquipoFutbol
        equiposFutbolArrayList.add(efu1);
        equiposFutbolArrayList.add(efu2);
        equiposFutbolArrayList.add(efu3);
        equiposFutbolArrayList.add(efu4);
        
        
    }

    /**
     * Método que borra todos los datos almacenados en la
     * aplicación pero no en el fichero
     */
    public void borrarTodosLosDatos()
    {
        arrayCompeticion.clear();
        arrayEquipos.clear();
        arrayUsuario.clear();
        parejaPadelArrayList.clear();
        equiposFutbolArrayList.clear();
        
        //Borra datos en las jTables
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            
            for (int col = 0; col < jTable1.getColumnCount(); col++) {
             
                jTable1.setValueAt(null, row, col);
            }

        }
        
        for (int row = 0; row < jTable2.getRowCount(); row++) {
            
            for (int col = 0; col < jTable1.getColumnCount(); col++) {
             
                jTable2.setValueAt(null, row, col);
            }

        }

    }
       
    /**
     * Método que crea un nuevo usuario en el sistema
     * y lo guarda en el arrayList de usuarios
     */
    public static void crearUsuario()
    {      
        JPanel panelCrearUsuario = new JPanel();
        JDialog frame = new JDialog();   
        
        //label nuevo usuario
        panelCrearUsuario.add(new JLabel("Nuevo Usuario: "));
      
        //textbox nuevo usuario
        JTextField jtNombreUsuario = new JTextField(15);
        panelCrearUsuario.add(jtNombreUsuario);
        
        //label DNI
        panelCrearUsuario.add(new JLabel("DNI usuario: "));
       
        //textbox DNI
        JTextField jtDNIUsuario = new JTextField(15);
        panelCrearUsuario.add(jtDNIUsuario);       
        
        //botón crear usuario
        JButton JButtonCrearUsuario = new JButton("Crear usuario");
        
            ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Usuario u = new Usuario();
                u.setNombre(jtNombreUsuario.getText());
                u.setDNI(jtDNIUsuario.getText());
                crearUsuario(u);
                frame.setVisible(false);

            }
        };

        JButtonCrearUsuario.addActionListener(listener);
        
        panelCrearUsuario.add(JButtonCrearUsuario);
             
        frame.getContentPane().add(panelCrearUsuario); 
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        frame.pack();
        frame.setSize(220, 170);
        frame.setModal(true);
        frame.setVisible(true); 
                 
    }
    
    /**
     * Método que confirma el evento de la creación del usuario 
     * y lo añade a un array de usuarios.
     */
    public static void crearUsuario(Usuario u) {                                            
        
        arrayUsuario.add(u);  
        
    }    
    
    /**
     * Método que borra un usuario del sistema
     */
    public static void eliminarUsuario()
    { 
        JPanel panelCrearUsuario = new JPanel();
        JDialog frame = new JDialog();   
        
        //label nuevo usuario
        panelCrearUsuario.add(new JLabel("Usuario a eliminar: "));
      
        //textbox nuevo usuario
        JTextField jtNombreUsuario = new JTextField(15);
        panelCrearUsuario.add(jtNombreUsuario);
        
        //label DNI
        panelCrearUsuario.add(new JLabel("DNI usuario a eliminar: "));
       
        //textbox DNI
        JTextField jtDNIUsuario = new JTextField(15);
        panelCrearUsuario.add(jtDNIUsuario);       
        
        //botón crear usuario
        JButton JButtonEliminarUsuario = new JButton("Eliminar usuario");
        
            ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Usuario u = new Usuario();
                u.setNombre(jtNombreUsuario.getText());
                u.setDNI(jtDNIUsuario.getText());
                if (!borrarUsuario(u))
                {
                    JOptionPane.showMessageDialog(null, "El usuario no ha "
                            + "podido borrarse correctamente\n, por favor "
                            + "asegurese de que los valores "
                            + "son los correctos."); 
                }
                frame.setVisible(false);

            }
        };

        //Añade listener
        JButtonEliminarUsuario.addActionListener(listener);
        
        panelCrearUsuario.add(JButtonEliminarUsuario);
             
        frame.getContentPane().add(panelCrearUsuario); 
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        frame.pack();
        frame.setSize(220, 170);
        frame.setModal(true);
        frame.setVisible(true); 
            
    }
    
    /**
     * Método que borra un usuario pasado por parámetro 
     * del array de usuarios
     * @param u
     * @return 
     */
    public static boolean borrarUsuario(Usuario u)
    {
        boolean resul = false;
        
        for (int i = 0; i < arrayUsuario.size(); i++) {
                       
         if (arrayUsuario.get(i).getDNI()
                  .equalsIgnoreCase(u.getDNI())) {
                
             arrayUsuario.remove(arrayUsuario.get(i));
             resul = true;
          }
        
        }   
        
        return resul;
    }
    
    /**
     * Método que borra un equipo del sistema
     */
    public static void eliminarEquipo()
    {
        JPanel panelCrearEquipo = new JPanel();
        JDialog frame = new JDialog();   
        
        //label nuevo usuario
        panelCrearEquipo.add(new JLabel("Equipo a eliminar: "));
      
        //textbox nuevo usuario
        JTextField jtNombreEquipo = new JTextField(15);
        panelCrearEquipo.add(jtNombreEquipo);
        
        //label DNI
        panelCrearEquipo.add(new JLabel("ID Equipo a eliminar: "));
       
        //textbox DNI
        JTextField jtIDEquipo = new JTextField(15);
        panelCrearEquipo.add(jtIDEquipo);       
        
        //botón crear usuario
        JButton JButtonEliminarEquipo = new JButton("Eliminar Equipo");
        
            ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Equipo eq = new Equipo();
                eq.setNombre(jtNombreEquipo.getText());
                eq.setId(jtIDEquipo.getText());
                if (!borrarEquipo(eq))
                {
                    JOptionPane.showMessageDialog(null, "El equipo no ha "
                            + "podido borrarse correctamente\n, por favor "
                            + "asegurese de que los valores "
                            + "son los correctos."); 
                }
                frame.setVisible(false);

            }
        };

        //añade al listener
        JButtonEliminarEquipo.addActionListener(listener);
        
        panelCrearEquipo.add(JButtonEliminarEquipo);
             
        frame.getContentPane().add(panelCrearEquipo); 
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        frame.pack();
        frame.setSize(220, 170);
        frame.setModal(true);
        frame.setVisible(true); 
        
    }
    
    /**
     * Método que borra un equipo pasado por parámetro
     * del array de equipos
     * @param e
     * @return 
     */
    public static boolean borrarEquipo(Equipo e)
    {
        boolean resul = false;
        
        for (int i = 0; i < arrayEquipos.size(); i++) {
                       
         if (arrayEquipos.get(i).getId()
                  .equalsIgnoreCase(e.getId())) {
                
             arrayEquipos.remove(arrayEquipos.get(i));
             resul = true;
          }
        
        }   
        return resul;
    }
    
    /**
     * Método que borra un equipo del sistema
     */
    public static void eliminarCompeticion()
    {
        JPanel panelCrearCompeticion = new JPanel();
        JDialog frame = new JDialog();   
        
        //label nuevo usuario
        panelCrearCompeticion.add(new JLabel("Competición  a eliminar: "));
      
        //textbox nuevo usuario
        JTextField jtNombreCompeticion  = new JTextField(15);
        panelCrearCompeticion.add(jtNombreCompeticion );
        
        //label DNI
        panelCrearCompeticion.add(new JLabel("ID Competición  a eliminar: "));
       
        //textbox DNI
        JTextField jtIDCompeticion  = new JTextField(15);
        panelCrearCompeticion.add(jtIDCompeticion );       
        
        //botón crear usuario
        JButton JButtonEliminarEquipo = new JButton("Eliminar Equipo");
        
            ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Competicion c = new Competicion ();
                c.setNombre(jtNombreCompeticion.getText());
                c.setIdCompeticion(jtIDCompeticion.getText());
                if (borrarCompeticion(c))
                {
                    JOptionPane.showMessageDialog(null, "La competición  no ha "
                            + "podido borrarse correctamente\n, por favor "
                            + "asegurese de que los valores "
                            + "son los correctos."); 
                }
                frame.setVisible(false); 

            }
        };

        //añadimos al listener
        JButtonEliminarEquipo.addActionListener(listener);
        
        panelCrearCompeticion .add(JButtonEliminarEquipo);
             
        frame.getContentPane().add(panelCrearCompeticion); 
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        frame.pack();
        frame.setSize(220, 170);
        frame.setModal(true);
        frame.setVisible(true);   
                
    }
    
    /**
     * Método que borra una competición pasada por parámetro
     * del array de competiciones
     * @param c
     * @return 
     */
    public static boolean borrarCompeticion(Competicion c)
    {
        boolean resul = false;
        
        for (int i = 0; i < arrayCompeticion.size(); i++) {
                       
         if (arrayCompeticion.get(i).getIdCompeticion()
                  .equalsIgnoreCase(c.getIdCompeticion())) {
                
             arrayCompeticion.remove(arrayCompeticion.get(i));
             resul = true;
          }
        
        }   
        return resul;
    }
  
    /**
     * Método que pide los datos de un equipo e 
     * instancia un objeto de la clase equipo para
     * que el sistema realice operaciones CRUD
     * @return 
     */
    public static void pedirDatosEquipos()
    {
        JPanel panelCrearEquipo = new JPanel();
        JDialog frame = new JDialog();   
        
        //label nuevo usuario
        panelCrearEquipo.add(new JLabel("Nuevo equipo "));
      
        //textbox nuevo usuario
        JTextField jtNombreEquipo = new JTextField(15);
        panelCrearEquipo.add(jtNombreEquipo);
        
        //label DNI
        panelCrearEquipo.add(new JLabel("ID equipo: "));
       
        //textbox DNI
        JTextField jtIdEquipo = new JTextField(15);
        panelCrearEquipo.add(jtIdEquipo);       
        
        //botón crear usuario
        JButton JButtonCrearEquipo = new JButton("Crear equipo");
        
            //escuchador
            ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Equipo eq = new Equipo();
                eq.setNombre(jtNombreEquipo.getText());
                eq.setId(jtIdEquipo.getText());
                crearEquipo(eq);
                frame.setVisible(false);

            }

        };
            
        //añadimos al escuchador
        JButtonCrearEquipo.addActionListener(listener);
        
        panelCrearEquipo.add(JButtonCrearEquipo);
             
        frame.getContentPane().add(panelCrearEquipo); 
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        frame.pack();
        frame.setSize(220, 170);
        frame.setModal(true);
        frame.setVisible(true);
    }
    
    /**
     * Método que añade un equipo pasado por parámetro 
     * al array de equipos
     * @param e 
     */
    public static void crearEquipo(Equipo e)
    {
        arrayEquipos.add(e);
        
    }
    
    /**
     * Método que pide los datos de un usuario e 
     * instancia un objeto de la clase usuario para
     * que el sistema realice operaciones CRUD
     * @return 
     */
    public static void pedirDatosCompeticion()
    {
        JPanel panelCrearCompeticion = new JPanel();
        JDialog frame = new JDialog();   
        
        //label nuevo usuario
        panelCrearCompeticion.add(new JLabel("Nueva competición "));
      
        //textbox nuevo usuario
        JTextField jtNombreCompeticion = new JTextField(15);
        panelCrearCompeticion.add(jtNombreCompeticion);
        
        //label DNI
        panelCrearCompeticion.add(new JLabel("ID competición: "));
       
        //textbox DNI
        JTextField jtIdCompeticion = new JTextField(15);
        panelCrearCompeticion.add(jtIdCompeticion);       
        
        //botón crear usuario
        JButton JButtonCrearCompeticion = new JButton("Crear equipo");
        
            ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Competicion c = new Competicion();
                c.setNombre(jtNombreCompeticion.getText());
                c.setIdCompeticion(jtIdCompeticion.getText());
                crearCompeticion(c);
                frame.setVisible(false);

            }

        };
            
        //añade escuchador    
        JButtonCrearCompeticion.addActionListener(listener);
        
        panelCrearCompeticion.add(JButtonCrearCompeticion);
             
        frame.getContentPane().add(panelCrearCompeticion); 
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        frame.pack();
        frame.setSize(220, 170);
        frame.setModal(true);
        frame.setVisible(true);
    }
    
    /**
     * Método que añade un objeto de la clase competición 
     * pasada por parámetro al array de competiciones
     * @param c 
     */
    public static void crearCompeticion(Competicion c)
    {
        arrayCompeticion.add(c);
    }
    
    /** 
     * Método que crea un nuevo equipo en el sistema
     */
    public static void crearEquipo()
    {
        pedirDatosEquipos();
    }        
    
    /**
     * Método que crea una nueva competición en el sistema
     */
    public static void crearCompeticion()
    {
       pedirDatosCompeticion();
    }
    
    
    /** 
     * Método que muestra los datos por pantalla
     */
    public static void mostrarDatos() {
       
        if (arrayUsuario.isEmpty()
            && arrayCompeticion.isEmpty()
            && arrayEquipos.isEmpty()) {
            
             JOptionPane.showMessageDialog(null, 
                    "No se han cargado todavía datos o han sido borrados.\n"
             + "Por favor cargue de nuevo los datos desde un archivo compatible\n"
             + "e inténtelo de nuevo"); 
             muestraPantallaDatos();
            
        }
        else
        {
            muestraPantallaDatos();
        }
   
    }
    
    /**
     * Método que imprime en el componente JTextArea los datos
     * alamacenados en memoria
     */
    public static void muestraPantallaDatos()
    {
        JPanel panelInfo = new JPanel();
            final JDialog frame = new JDialog();
            frame.getContentPane().add(panelInfo); 
               
            JTextArea textArea = new JTextArea(25, 30);
           
            JScrollPane scroll = new JScrollPane (textArea);
            scroll.setVerticalScrollBarPolicy ( 
            ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS );
    
            panelInfo.add(scroll);
                    
            StringBuilder sb = new StringBuilder();
        
            sb.append("\tDATOS ACTUALES EN MEMORIA\n");
            sb.append("\t-------------------------");
            sb.append("\n\n");
        
            for (Usuario u : arrayUsuario) {
            
               sb.append(u.imprimir());
               sb.append("\n");
        
            }
            for (Equipo e : arrayEquipos) {

               sb.append(e.imprimir());
               sb.append("\n");   

            }
            for (Competicion c : arrayCompeticion) {

               sb.append(c.imprimir());
               sb.append("\n");           
            }        

            textArea.setText(sb.toString());
            textArea.setSize(30, 20);
            textArea.setEditable(false);
            textArea.setBackground(Color.LIGHT_GRAY);
            textArea.setLineWrap(true);
            textArea.setWrapStyleWord(false);

            frame.pack();
            frame.setSize(420, 460);
            frame.setModal(true);
            frame.setVisible(true); 
    }
    
    /**
     * Método que parsea un objeto tipo List (en este caso un ArrayList)
     * a una string con notación json
     * @param array
     * @return 
     */
    public static String parsearAJson(Object array)
    {
        String jsonAsString = new Gson().toJson(array);
          
        return jsonAsString;
    }
    
}
